// v1.0.0
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).lutFilter=t()}(this,function(){"use strict";const e={type:"x-shader/x-vertex",text:"\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec2 zeroToOne = a_position / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n  v_texCoord = a_texCoord;\n}\n"},t={type:"x-shader/x-fragment",text:"\nprecision mediump float;\n\nvarying lowp vec2 v_texCoord;\n\nuniform sampler2D u_image0;\nuniform sampler2D u_image1; // lookup texture\n\nvoid main()\n{\n  vec4 textureColor = texture2D(u_image0, v_texCoord);\n\n  float blueColor = textureColor.b * 63.0;\n\n  vec2 quad1;\n  quad1.y = floor(floor(blueColor) / 8.0);\n  quad1.x = floor(blueColor) - (quad1.y * 8.0);\n\n  vec2 quad2;\n  quad2.y = floor(ceil(blueColor) / 8.0);\n  quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n\n  vec2 texPos1;\n  texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n  texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n\n  vec2 texPos2;\n  texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n  texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n\n  lowp vec4 newColor1 = texture2D(u_image1, texPos1);\n  lowp vec4 newColor2 = texture2D(u_image1, texPos2);\n\n  lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n\n  gl_FragColor = mix(textureColor, vec4(newColor.rgb, textureColor.w), 1.0);\n}\n"};return function({canvas:r,filterImage:o,image:n}){const a=r.getContext("webgl"),i=function(e,t){const r=[];for(var o=0;o<t.length;++o){let{type:n,text:a}=t[o];"x-shader/x-vertex"===n?n=e.VERTEX_SHADER:"x-shader/x-fragment"===n&&(n=e.FRAGMENT_SHADER);const i=e.createShader(n);e.shaderSource(i,a),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS),r.push(i)}const n=e.createProgram();return r.forEach(t=>e.attachShader(n,t)),e.linkProgram(n),n}(a,[e,t]),T=a.getAttribLocation(i,"a_position"),E=a.getAttribLocation(i,"a_texCoord"),u=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,u);const _=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,_),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),a.STATIC_DRAW);const x=a.getUniformLocation(i,"u_resolution"),c=a.getUniformLocation(i,"u_image0"),l=a.getUniformLocation(i,"u_image1");r.width=n.width,r.height=n.height;const R=a.createTexture();a.bindTexture(a.TEXTURE_2D,R),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.NEAREST),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,n);const d=a.createTexture();a.bindTexture(a.TEXTURE_2D,d),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.NEAREST),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.NEAREST),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,o),a.clearColor(0,0,0,0),a.clear(a.COLOR_BUFFER_BIT),a.useProgram(i),a.viewport(0,0,a.canvas.width,a.canvas.height),a.bindBuffer(a.ARRAY_BUFFER,u),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,r.width,0,0,r.height,0,r.height,r.width,0,r.width,r.height]),a.STATIC_DRAW),a.enableVertexAttribArray(T),a.vertexAttribPointer(T,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(E),a.bindBuffer(a.ARRAY_BUFFER,_),a.vertexAttribPointer(E,2,a.FLOAT,!1,0,0),a.uniform2f(x,a.canvas.width,a.canvas.height),a.uniform1i(c,0),a.uniform1i(l,1),a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,R),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,d),a.drawArrays(a.TRIANGLES,0,6)}});
